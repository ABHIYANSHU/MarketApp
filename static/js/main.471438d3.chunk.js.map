{"version":3,"sources":["components/basicdetails/datalist.js","components/basicdetails/basicdetails.js","components/fetchdata/fetchdata.js","serviceWorker.js","index.js"],"names":["DataList","props","state","dataLst","maxmin","url","this","match","params","id","axios","get","then","data","allRep","setState","navPrice","map","item","nav","console","log","getData","length","getMaxMin","className","width","height","strokeDasharray","dataKey","domain","min","max","type","stroke","strokeWidth","React","Component","BasicDetails","isDataPage","metaValue","meta","fund_house","scheme_type","scheme_category","scheme_name","scheme_code","to","FetchData","final","initial","res","Array","i","toString","all","spread","alldata","tp","Boolean","window","location","hostname","ReactDOM","render","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.471438d3.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\r\n} from 'recharts';\r\n\r\nclass DataList extends React.Component {\r\n\r\n    getData() {\r\n    \r\n        var url = 'https://api.mfapi.in/mf/'+this.props.match.params.id;\r\n        \r\n        axios.get(url).then((data) =>\r\n          {\r\n            const allRep = data.data.data;\r\n            // console.log(allRep);\r\n            this.setState({dataLst: allRep});\r\n          });\r\n      }\r\n\r\n      getMaxMin() {\r\n        var navPrice = [999999, 0]\r\n\r\n        this.state.dataLst.map(item => {\r\n          // console.log(item.nav);\r\n          if (item.nav < navPrice[0])\r\n            navPrice[0] = item.nav;\r\n          \r\n          if (item.nav > navPrice[1])\r\n            navPrice[1] = item.nav;\r\n        })\r\n\r\n        console.log(navPrice);\r\n        return navPrice;\r\n      }\r\n\r\n      componentDidMount() {\r\n        this.getData();\r\n        this.state.dataLst.length === 0 ? console.log('Wait') : this.setState({maxmin: this.getMaxMin()});\r\n      }\r\n\r\n    constructor(props){\r\n        super(props);\r\n        // console.log(props.match);\r\n        this.state = {dataLst: [], maxmin: []}\r\n    }\r\n\r\n    render() {\r\n\r\n        return(\r\n          <div className=\"graph\">\r\n              <LineChart\r\n              data={this.state.dataLst}\r\n              width={1000}\r\n              height={800}\r\n              >\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis dataKey=\"date\" />\r\n                <YAxis domain={[this.state.min, this.state.max]} />\r\n                <Tooltip />\r\n                <Legend />\r\n                <Line type=\"monotone\" dataKey=\"nav\" stroke=\"red\" strokeWidth={2} />\r\n              </LineChart>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DataList;","import React, { Component } from 'react';\r\nimport { Link, Route, Switch, BrowserRouter as Router } from 'react-router-dom';\r\nimport FetchData from '../fetchdata/fetchdata';\r\nimport DataList from './datalist';\r\n\r\nclass BasicDetails extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isDataPage: false\r\n        }\r\n    }\r\n\r\n    setDataPage(){\r\n        this.setState({isDataPage: !this.state.isDataPage});\r\n    }\r\n\r\n\r\n    render() {\r\n        const metaValue = this.props.data.meta;\r\n        const dataValue = this.props.data.data;\r\n\r\n        //console.log(dataValue);\r\n\r\n        return(\r\n            <div className=\"card\" >\r\n                <h1>{ metaValue.fund_house }</h1>\r\n                <h2>{ metaValue.scheme_type }</h2>\r\n                <h3>{ metaValue.scheme_category }</h3>\r\n                <h4>{ metaValue.scheme_name }</h4>\r\n                <h5>{ metaValue.scheme_code }</h5>\r\n                <Link to={\"/ShareMarketAnalysis/data/\"+metaValue.scheme_code}><button>Data</button></Link>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BasicDetails;","import React from 'react';\r\nimport axios from 'axios';\r\nimport BasicDetails from '../basicdetails/basicdetails';\r\n\r\nclass FetchData extends React.Component {\r\n\r\n  getData() {\r\n    const final = 112249;\r\n    const initial = 112200;\r\n\r\n    var url = 'https://api.mfapi.in/mf/';\r\n\r\n    var res = new Array(final - initial);\r\n\r\n    for (var i = initial; i < final; i++){\r\n      res[i-112200] = axios.get(url+i.toString());\r\n    }\r\n\r\n    axios.all(res).then(\r\n      axios.spread((...alldata) => {\r\n\r\n        const tp = alldata;\r\n        this.setState({data: tp});\r\n\r\n        /*\r\n        console.log('----------------------------');\r\n        console.log(tp);\r\n        console.log('----------------------------');\r\n        */\r\n      }\r\n    ))\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {data: []};\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getData();\r\n  }\r\n\r\n  render() {\r\n\r\n    // this.state.data.length === 0 ? console.log('no data') : console.log(this.state.data);\r\n\r\n    return (\r\n        <div className=\"cards\">\r\n            {\r\n            this.state.data.length === 0 ? <em>Loading...</em> : this.state.data.map(item => {\r\n              const fin = item.data.data.length === 0 ? \r\n              <></> \r\n              :\r\n              <BasicDetails key={ item.data.meta.scheme_code } data={ item.data } />\r\n              return fin;\r\n            })\r\n            }\r\n        </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default FetchData;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport DataList from './components/basicdetails/datalist';\r\nimport FetchData from './components/fetchdata/fetchdata';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <Switch>\r\n      <Route exact path=\"/ShareMarketAnalysis/\" component={FetchData} />\r\n      <Route path=\"/ShareMarketAnalysis/data/:id\" component={DataList} />\r\n    </Switch>\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}